ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 50)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 10)
rdu_flights %>% group_by(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay),
n = n())
rdu_flights <- nycflights %>% filter(dest == "RDU")
rdu_flights %>% group_by(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay),
n = n())
rdu_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay))
rdu_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay),
iqr_dd = IQR(arr_delay))
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay),
iqr_dd = IQR(arr_delay))
sfo_feb_flights
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay),
iqr_dd = IQR(arr_delay))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>% arrange(desc(mean_dd))
sfo_feb_flights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>% group_by(month) %>% summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) + geom_bar()
names(nycflights)
head(nycflights)
head(nycflights$hour)
nycflights <- nycflights %>% mutate(avg_speed = (dist / air_time/60))
nycflights <- nycflights %>% mutate(avg_speed = (distance / air_time/60))
select(avg_speed, tailnum)
nycflights %>% arrange(desc(avg_speed))
nycflights %>% arrange(desc(avg_speed)) %>% select(avg_speed,tailnum)
ggplot(nycflights, aes(x = avg_speed, y = distance))
ggplot(nycflights, aes(x = avg_speed, y = distance)) + geom_line()
ggplot(nycflights, aes(x = avg_speed, y = distance)) + geom_point()
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
names(nycflights)
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 10)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 30)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 5)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
data(nycflights)
#```
' The data frame containing our [nrow(nycflights) = 32735] flights that shows up in your
workspace is a *data matrix*, w/ each row representing an *observation* + each
column representing a *variable*. R calls this data format a **data frame**, which is
a term that will be used throughout the labs '
#```{r names}
names(nycflights)
#```
'This returns the names of the variables in this data frame. The **codebook**
(description of the variables) is included below. This info can also be
found in the help file for the data frame which can be accessed w/ ?nycflights
- `year`, `month`, `day`  : Date of departure
- `dep_time`, `arr_time`  : Departure + arrival times, local timezone.
- `dep_delay`, `arr_delay`: Departure + arrival delays, in minutes.
+ Negative times represent early departures/arrivals.
- `carrier`: 2 letter carrier abbreviation.
+ `9E`:           Endeavor Air Inc.
+ `AA`:      American Airlines Inc.
+ `AS`:        Alaska Airlines Inc.
+ `B6`:             JetBlue Airways
+ `DL`:        Delta Air Lines Inc.
+ `EV`:    ExpressJet Airlines Inc.
+ `F9`:      Frontier Airlines Inc.
+ `FL`: AirTran Airways Corporation
+ `HA`:      Hawaiian Airlines Inc.
+ `MQ`:                   Envoy Air
+ `OO`:       SkyWest Airlines Inc.
+ `UA`:       United Air Lines Inc.
+ `US`:             US Airways Inc.
+ `VX`:              Virgin America
+ `WN`:      Southwest Airlines Co.
+ `YV`:          Mesa Airlines Inc.
- `tailnum`         : Plane tail number
- `flight`          : Flight number
- `origin`, `dest`  : Airport codes for origin + destination. (Google can help you w/ what code
stands for which airport.)
- `air_time`        : Amount of time spent in the air, in minutes.
- `distance`        : Distance flown, in miles.
- `hour`, `minute`  : Time of departure broken in to hour and minutes.
Take a quick peek at the data frame + view its dimensions + data types w/ str (**str**ucture)'
#```{r str}
str(nycflights)
#```
'nycflights is a massive trove of info (32375 obs of 16 vars). Let\'s think about some questions we
might want to answer w/ it
- We might want to find out how delayed flights headed to a particular destination tend to be.
- We might want to evaluate how departure delays vary over months.
- We might want to determine which of the 3 major NYC airports has a better on-time % for
departing flights'
### Seven verbs
'`dplyr` offers 7 verbs (functions) for basic data manipulation:
- `filter()`
- `arrange()`
- `select()`
- `distinct()`
- `mutate()`
- `summarise()`
- `sample_n()`'
## Analysis
### Departure delays in flights to Raleigh-Durham (RDU)
'We can examine the distribution of departure delays of all flights W/ a histogram.
- Plot dep_delay from nycflights on the x-axis and create a histogram w/ "geom"'
#```{r hist-dep-delay}
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
#```
#Very right-skewed, so a lot of flights have a short delay, with many having negative delays (early)
'Histograms are generally a very good way to see the shape of a single distribution, but that shape
can change depending on how the data is split between the different bins.
-You can easily define the binwidth you want to use w/ the arg "binwidth"'
#```{r hist-dep-delay-bins}
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 150)
#
'<div id="exercise">
**Exercise**: How do these 3 histograms w/ the various binwidths compare?
</div>'
'If we want to focus on departure delays of flights headed to RDU *only*, we need to filter the data
for flights headed to RDU + then make a histogram of only departure delays of only those flights.'
#```{r rdu-flights-hist}
rdu_flights <- nycflights %>% filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
#```
'- Line 1 --> Take nycflights + apply filter() via the pipe operator (%>%) for flights w/ a destination
of RDU + save the result in a new data frame = `rdu_flights`.
- Line 2  --> Same histogram ggplot call from earlier except it uses the rdu_flights data frame'
#Still right-skewed --> most flights have short delays, if any, w/ most being on time or early
'<div id="boxedtext">
**Logical operators: ** Filtering for certain observations (e.g. flights from a particular airport)
is often of interest in data frames where we might want to examine observations w/ certain
characteristics separately from the rest of the data.
To do so we use filter() + a series of **logical operators**. The most commonly used logical operators
for data analysis are as follows:
- `==`          ==> "equal to"
- `!=`          ==> "not equal to"
- `>` or `<`    ==>  "greater than" or "less than"
- `>=` or `<=`  ==> "greater than or equal to" or "less than or equal to"
</div>'
#We can also obtain numerical summaries for these flights:
#```{r rdu-flights-summ}
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
#```
'W/ summarise() we created a list of 2 USER-DEFINED elements named `mean_dd`, `sd_dd`, `n`
-can customize these names as you like (just don\'t use spaces).
-Calculating these summary statistics also requires that you know the function calls.
- Note: n() reports sample size.
<div id="boxedtext">
**Summary statistics: ** Useful function calls for summary statistics for a *single* numerical
variable are as follows:
- `mean`
- `median`
- `sd`
- `var`
- `IQR`
- `range`
- `min`
- `max`
</div>
We can also filter based on multiple criteria. Suppose we\'re interested in flights headed to SF (SFO)
in February:'
#```{r}
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
#```
#We filer all flights from nycflights with a destination of SF AND in the month of Feb
'Note we separates the conditions using commas to get flights that are BOTH headed to SFO **AND** in
February. If interested in either flights headed to SFO **OR** in February, use `|` instead'
'1. Create a new data frame for flights headed to SFO in February, `sfo_feb_flights`. How many
flights meet these criteria? '
#```{r sfo-feb-flights}
str(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) + geom_bar()
nycflights <- nycflights %>% mutate(avg_speed = (distance / air_time/60))
nycflights %>% arrange(desc(avg_speed)) %>% select(avg_speed,tailnum)
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
- You\'re only recommending similar things to what the user has already liked, so the recommendations are often not surprising
rm(list=ls(all=TRUE))
setwd("C:/Users/Nimz/Dropbox/RunningAnalysis/Data")
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
#remove 1st col
runs$X <- NULL
str(runs)
summary(runs)
library(ggplot2)
#?barplot(sum(runs$Distance),runs$monthNum)
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="*Majority of runs were between 9 and 11 miles, with a suprisingly low number of runs between 7 and 9 miles")
tapply(runs$Distance,runs$Month,sum)
#Aug    Jul    Nov    Oct    Sep
#251.50 118.08 168.44 304.45 308.14
ggplot(data = runs, aes(x = monthNum, y = Distance, fill = monthNum)) +
geom_bar(stat="identity") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
#most miles in August, not October, still more in November than in June
#boxplot(Cad ~ monthNum, data = runs)
ggplot(data = runs, aes(factor(monthNum), Cad)) +
geom_boxplot(aes(fill = factor(monthNum)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
ggplot(data = runs, aes(factor(monthNum), Avg.HR)) +
geom_boxplot(aes(fill = factor(monthNum)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
as.Date(runs$Month, format = "%m")
as.Date(runs$Month, format = "%M")
as.Date(runs$Month, format = "%b")
as.Date(runs$Month, format = "%B")
runs$Month
as.Date(runs$Month), format = "%B")
as.Date(runs$Month)
month.abb[runs$Month]
month.abb[runs$monthNum]
runs$month2 <- month.abb[runs$monthNum]
ggplot(data = runs, aes(factor(month2), Cad)) +
geom_boxplot(aes(fill = factor(month2)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
setwd("C:/Users/Nimz/Dropbox/RunningAnalysis/Data")
#load strava data
strava <- read.csv("strava.csv")
dim(strava)
head(strava)
#load garmin data
garmin1 <- read.csv("garmin1.csv")
dim(garmin1)
head(garmin1)
garmin6 <- read.csv("garmin6.csv")
dim(garmin1)
head(garmin6)
garmin2 <- read.csv("garmin2.csv")
garmin3 <- read.csv("garmin3.csv")
garmin4 <- read.csv("garmin4.csv")
garmin5 <- read.csv("garmin5.csv")
#Combine garmin data files into 1 data frame
garminFull <- Reduce(function(...) merge(..., all=TRUE), list(garmin1, garmin2, garmin3, garmin4,
garmin5, garmin6))
dim(garminFull)
summary(garminFull)
head(garminFull)
#remove top 2 null rows
garminFull <- garminFull[-c(1,2),]
head(garminFull)
#remove unneccessary cols
keepCols <- NA
keepCols <- c("Activity.Id", "When", "Type", "Gear", "Name", "Dist.mi", "Elv.ft", "Elapsed.Time", "Moving.Time",
"Speed.mph", "Pace..mi", "Max.Pace..mi", "Cad", "Heart", "Max.Heart", "Elev.Dist.ft.mi",
"Elev.Time.ft.h", "Cal", "Segs", "PRs", "Kudos")
newStrava <- strava[keepCols]
str(newStrava)
#split When into Date and Time fields in Strava data
library(stringr)
newStrava$Date <- str_split_fixed(newStrava$When, " ", 2)[,1]
newStrava$StartTime <- str_split_fixed(newStrava$When, " ", 2)[,2]
str(newStrava)
library(tidyr)
#Specify the new column names:
vars <- c("Date", "StartTime")
vars2 <- c("DOW", "Date")
#Separate columns according to regex and/or delimiteres and proceed to drop remaining extra columns:
garminFull <- separate(garminFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
garminFull <- separate(garminFull, Date, into = vars2, sep = ", ", extra = "merge", remove = TRUE)
#Create MonthNumber field based on what is in Date field
garminFull$monthNum <- ifelse(grepl("Jan",garminFull$Date),1,
ifelse(grepl("Feb",garminFull$Date),2,
ifelse(grepl("Mar",garminFull$Date),3,
ifelse(grepl("Apr",garminFull$Date),4,
ifelse(grepl("May",garminFull$Date),5,
ifelse(grepl("Jun",garminFull$Date),6,
ifelse(grepl("Jul",garminFull$Date),7,
ifelse(grepl("Aug",garminFull$Date),8,
ifelse(grepl("Sep",garminFull$Date),9,
ifelse(grepl("Oct",garminFull$Date),10,
ifelse(grepl("Nov",garminFull$Date),11,
ifelse(grepl("Dec",garminFull$Date),12,NA))))))))))))
head(garminFull,2)
#create dy, mth, yr fields}
vars3 <- c("Month", "Date")
vars4 <- c("Day", "Year")
garminFull <- separate(garminFull, Date, into = vars3, sep = " ", extra = "merge", remove = TRUE)
garminFull <- separate(garminFull, Date, into = vars4, sep = ", ", extra = "merge", remove = TRUE)
head(garminFull,2)
#remove whitespace
garminFull$Year <- trimws(garminFull$Year)
#Create Date field from 3 components: Day, Month, Year
garminFull$Date <- format(as.Date(with(garminFull, paste(Year, monthNum, Day,sep="-")), "%Y-%m-%d"), "%m/%d/%Y")
str(garminFull$Date)
#remove Garmin Cols
keepColsGarmin  <- NA
keepColsGarmin <- c("DOW", "Month", "StartTime", "Time", "Distance", "Elevation.Gain", "Avg.Speed.Avg.Pace.", "Avg.HR",
"Max.HR", "Calories", "Date", "monthNum")
newGarmin <- garminFull[keepColsGarmin]
head(newGarmin,2)
#format date field
newGarmin$Date <- as.Date(newGarmin$Date,"%m/%d/%Y")
newStrava$Date <- as.Date(newStrava$Date,"%m/%d/%Y")
#Check data type if Dates
str(newGarmin$Date)
str(newStrava$Date)
#Sort data frames from earliest to last date
newGarmin <- newGarmin[order(newGarmin$Date, decreasing = FALSE),]
newStrava <- newStrava[order(newStrava$Date, decreasing = FALSE),]
head(newGarmin$Date)
head(newStrava$Date)
#remove excess strava runs
newStrava <- newStrava[!newStrava$Date < "2016-07-18",]
#check row counts
nrow(newGarmin)
nrow(newStrava)
#check garmin runs
table(newGarmin$Distance)
#check garmin wierd distances
newGarmin[newGarmin$Distance=="0.12",]
newGarmin[newGarmin$Distance=="0.16",]
newGarmin[newGarmin$Distance=="1.42",]
#remove spin sessionts
newGarmin <- newGarmin[!newGarmin$Date == "2016-08-27",]
newGarmin <- newGarmin[!newGarmin$Date == "2016-09-01",]
#check garmin run dates
table(newGarmin$Date) > 1
#check august garmin runs
which(newStrava$Date == '8/12/2016') #runs 95 and 96
newStrava[95:96,]
#check october garmin runs
newGarmin[newGarmin$Date == "2016-10-23",]
#remove last bike ride
newGarmin <- newGarmin[!(newGarmin$Date == "2016-10-23" & newGarmin$Elevation.Gain == 657),]
#check row counts
nrow(newGarmin)
nrow(newStrava)
#check date match up
head(newGarmin)
head(newStrava)
#rename garmin cols
library(plyr)
newGarmin <- rename(newGarmin, c("Date"="date_garmin"))
newGarmin <- rename(newGarmin, c("StartTime"="StartTime_AM_PM"))
newStrava$When <- NULL #removes column
#combine data sets}
newFullData <- cbind(newGarmin,newStrava)
#inspect
head(newFullData,3)
#check dates
head(newFullData[,c("Date","date_garmin")])
tail(newFullData[,c("Date","date_garmin")])
#keep full dataset cols
newFullData <- rename(newFullData, c("Activity.Id"="ID"))
keepColsFull  <- NA
keepColsFull <- c("ID", "Gear", "Name", "Speed.mph", "Cad", "Date", "StartTime", "DOW", "Month",  "Time", "Distance",
"Elevation.Gain", "Avg.Speed.Avg.Pace.", "Avg.HR", "Max.HR", "Calories", "monthNum")
newFullData <- newFullData[keepColsFull]
#rearrange columns
newFullData <- newFullData[, c("ID", "Name", "Gear", "Date", "Month", "monthNum", "DOW", "StartTime",  "Distance",
"Time", "Avg.Speed.Avg.Pace.", "Speed.mph", "Cad",  "Elevation.Gain", "Avg.HR", "Max.HR",
"Calories")]
#check run names
table(newFullData$Name)
#fix ml runs
newFullData$Name[newFullData$Name == 'MIddle Long Run'] <- 'ML Run'
newFullData$Name[newFullData$Name == 'Middle Long Run'] <- 'ML Run'
#check morning runs
newFullData[newFullData$Name == 'Morning Run',]
#rename morning runs
newFullData$Name[newFullData$ID == 650512799] <- 'Recovery Run'
newFullData$Name[newFullData$ID == 655096239] <- 'ML Run'
#new run categories
newFullData$RunType <- ifelse(grepl('LT',newFullData$Name),'Workout',
ifelse(grepl('Tempo',newFullData$Name),'Workout',
ifelse(grepl('Tune',newFullData$Name),'Workout',
ifelse(grepl('VO2',newFullData$Name),'Workout',
#ifelse(grepl('MP',newFullData$Name),'Workout',
ifelse(grepl('Long',newFullData$Name),'Long Run',
ifelse(grepl('Recovery',newFullData$Name),'Recovery Run',
ifelse(grepl('Marathon',newFullData$Name),'Race','Run')))))))#)
table(newFullData$RunType)
newFullData$Month <- month.abb[newFullData$monthNum]
str(newFullData)
setwd("C:/Users/Nimz/Dropbox/RunningAnalysis/Data")
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
#remove 1st col
runs$X <- NULL
str(runs)
summary(runs)
library(ggplot2)
#?barplot(sum(runs$Distance),runs$monthNum)
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="*Majority of runs were between 9 and 11 miles, with a suprisingly low number of runs between 7 and 9 miles")
tapply(runs$Distance,runs$Month,sum)
#Aug    Jul    Nov    Oct    Sep
#251.50 118.08 168.44 304.45 308.14
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
#most miles in August, not October, still more in November than in June
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="*Majority of runs were between 9 and 11 miles, with a suprisingly low number of runs between 7 and 9 miles")
tapply(runs$Distance,runs$Month,sum)
#Aug    Jul    Nov    Oct    Sep
#251.50 118.08 168.44 304.45 308.14
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
#most miles in August, not October, still more in November than in June
#boxplot(Cad ~ monthNum, data = runs)
ggplot(data = runs, aes(factor(Month), Cad)) +
geom_boxplot(aes(fill = factor(Month)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
ggplot(data = runs, aes(factor(Month), Avg.HR)) +
geom_boxplot(aes(fill = factor(Month)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
setwd("C:/Users/Nimz/Dropbox/RunningAnalysis/Data")
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
#remove 1st col
runs$X <- NULL
str(runs)
summary(runs)
ggplot(data = runs, aes(factor(Month), Cad)) +
geom_boxplot(aes(fill = factor(Month, levels = Month[order(monthNum)])), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
factor(runs$Month, levels = runs$Month[order(runs$monthNum)]), ordered = TRUE)
factor(runs$Month, levels = runs$Month[order(runs$monthNum)]))
factor(runs$Month, levels = runs$Month[order(runs$monthNum)])
factor(runs$Month, levels = runs$Month[order(runs$monthNum)], ordered = TRUE)
ggplot(data = runs, aes(factor(Month), Cad)) +
geom_boxplot(aes(fill = factor(runs$Month, levels = runs$Month[order(runs$monthNum)], ordered = TRUE), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
ggplot(data = runs, aes(factor(Month), Cad)) +
geom_boxplot(aes(fill = factor(runs$Month, levels = runs$Month[order(runs$monthNum)], ordered = TRUE), outlier.colour = "red")) + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
ggplot(data = runs, aes(factor(Month), Cad)) +
geom_boxplot(aes(fill = factor(runs$Month, levels = runs$Month[order(runs$monthNum)], ordered = TRUE), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
ggplot(data = runs, aes(factor(Month), Cad)) +
geom_boxplot(aes(fill = factor(runs$Month, levels = runs$Month[order(runs$monthNum)], ordered = TRUE)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
