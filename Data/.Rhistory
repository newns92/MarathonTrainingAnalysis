+ `YV`:          Mesa Airlines Inc.
- `tailnum`         : Plane tail number
- `flight`          : Flight number
- `origin`, `dest`  : Airport codes for origin + destination. (Google can help you w/ what code
stands for which airport.)
- `air_time`        : Amount of time spent in the air, in minutes.
- `distance`        : Distance flown, in miles.
- `hour`, `minute`  : Time of departure broken in to hour and minutes.
Take a quick peek at the data frame + view its dimensions + data types w/ str (**str**ucture)'
#```{r str}
str(nycflights)
#```
'nycflights is a massive trove of info (32375 obs of 16 vars). Let\'s think about some questions we
might want to answer w/ it
- We might want to find out how delayed flights headed to a particular destination tend to be.
- We might want to evaluate how departure delays vary over months.
- We might want to determine which of the 3 major NYC airports has a better on-time % for
departing flights'
### Seven verbs
'`dplyr` offers 7 verbs (functions) for basic data manipulation:
- `filter()`
- `arrange()`
- `select()`
- `distinct()`
- `mutate()`
- `summarise()`
- `sample_n()`'
## Analysis
### Departure delays in flights to Raleigh-Durham (RDU)
'We can examine the distribution of departure delays of all flights W/ a histogram.
- Plot dep_delay from nycflights on the x-axis and create a histogram w/ "geom"'
#```{r hist-dep-delay}
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
#```
#Very right-skewed, so a lot of flights have a short delay, with many having negative delays (early)
'Histograms are generally a very good way to see the shape of a single distribution, but that shape
can change depending on how the data is split between the different bins.
-You can easily define the binwidth you want to use w/ the arg "binwidth"'
#```{r hist-dep-delay-bins}
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 150)
#
'<div id="exercise">
**Exercise**: How do these 3 histograms w/ the various binwidths compare?
</div>'
'If we want to focus on departure delays of flights headed to RDU *only*, we need to filter the data
for flights headed to RDU + then make a histogram of only departure delays of only those flights.'
#```{r rdu-flights-hist}
rdu_flights <- nycflights %>% filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
#```
'- Line 1 --> Take nycflights + apply filter() via the pipe operator (%>%) for flights w/ a destination
of RDU + save the result in a new data frame = `rdu_flights`.
- Line 2  --> Same histogram ggplot call from earlier except it uses the rdu_flights data frame'
#Still right-skewed --> most flights have short delays, if any, w/ most being on time or early
'<div id="boxedtext">
**Logical operators: ** Filtering for certain observations (e.g. flights from a particular airport)
is often of interest in data frames where we might want to examine observations w/ certain
characteristics separately from the rest of the data.
To do so we use filter() + a series of **logical operators**. The most commonly used logical operators
for data analysis are as follows:
- `==`          ==> "equal to"
- `!=`          ==> "not equal to"
- `>` or `<`    ==>  "greater than" or "less than"
- `>=` or `<=`  ==> "greater than or equal to" or "less than or equal to"
</div>'
#We can also obtain numerical summaries for these flights:
#```{r rdu-flights-summ}
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
#```
'W/ summarise() we created a list of 2 USER-DEFINED elements named `mean_dd`, `sd_dd`, `n`
-can customize these names as you like (just don\'t use spaces).
-Calculating these summary statistics also requires that you know the function calls.
- Note: n() reports sample size.
<div id="boxedtext">
**Summary statistics: ** Useful function calls for summary statistics for a *single* numerical
variable are as follows:
- `mean`
- `median`
- `sd`
- `var`
- `IQR`
- `range`
- `min`
- `max`
</div>
We can also filter based on multiple criteria. Suppose we\'re interested in flights headed to SF (SFO)
in February:'
#```{r}
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
#```
#We filer all flights from nycflights with a destination of SF AND in the month of Feb
'Note we separates the conditions using commas to get flights that are BOTH headed to SFO **AND** in
February. If interested in either flights headed to SFO **OR** in February, use `|` instead'
'1. Create a new data frame for flights headed to SFO in February, `sfo_feb_flights`. How many
flights meet these criteria? '
#```{r sfo-feb-flights}
str(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) + geom_bar()
nycflights <- nycflights %>% mutate(avg_speed = (distance / air_time/60))
nycflights %>% arrange(desc(avg_speed)) %>% select(avg_speed,tailnum)
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
- You\'re only recommending similar things to what the user has already liked, so the recommendations are often not surprising
rm(list=ls(all=TRUE))
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
dept <- read.csv("department.csv")
dx <- read.csv("diagnosis.csv")
medOrdrs <- read.csv("medication_order.csv")
visit <- read.csv("visit.csv")
visit_Dx <- read.csv("visit_diagnosis.csv")
#inspect
str(dept)
str(dx)
str(medOrdrs)
head(medOrdrs)
str(visit)
head(visit)
str(visit_Dx)
#subset data frame into only hospital encounters
#hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83
hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83)
str(hospital_visits)
class(hospital_visits$CONTACT_DT_KEY)
#subset hospital encounters after to August 1 2014
afterAug14 <- subset(hospital_visits, hospital_visits$CONTACT_DT_KEY > 20140801)
str(afterAug14)
class(afterAug14$AGE)
#patients between 1 and 18 years of age
children <- subset(afterAug14, afterAug14$AGE >= 1 & afterAug14$AGE <= 18)
summary(children)
head(children)
#INNER JOIN children with the visit diagnoses dataset to get all diagnoses that occured within each visit
#visit_Dx[visit_Dx$VISIT_KEY == 83068068,]
#children[children$VISIT_KEY == 83250029,]
children <- merge(children,visit_Dx[c("VISIT_KEY","DX_KEY","SEQ_NUM","DX_CMT","HSP_ACCT_KEY","DICT_DX_STS_KEY")]
, by = "VISIT_KEY")
str(children)
head(children)
#INNER JOIN children with the diagnoses codes dataset to get all ICD9 diagnoses codes
class(dx$ICD9_CD)
children_dx <- merge(children,dx[c("DX_ID","DX_KEY","DX_NM","ICD9_CD")],on="DX_KEY",all.x = TRUE)
str(children_dx)
#children_dx[children_dx$VISIT_KEY == 83692613,]
#subset data into only an Emergency Department diagnosis (primary or secondary)  of anaphylaxis or allergic reaction
children_dx <- subset(children_dx, children_dx$DICT_DX_STS_KEY %in% c(313,314))
codes <- c("995.0", "995.3", "995.6", "995.60", "995.61", "995.62", "995.63", "995.64", "995.65", "995.66", "995.67", "995.68",
"995.69","995.7","999.4","999.41","999.42","999.49")
#children_dx[children_dx$VISIT_KEY == 83692613,]
children_dx <- subset(children_dx, children_dx$ICD9_CD %in% codes)
str(children_dx)
head(children_dx)
#LEFT JOIN children with the department dataset to get all department of the encounter
#children_dx <- merge(children_dx,dept[c("DEPT_KEY","DEPT_NM","SPECIALTY","DEBT_ABBR","DEPT_GROUP")],on="DEPT_KEY")
children_dx <- merge(children_dx,dept,on="DEPT_KEY",all.x = TRUE)
str(children_dx)
#remove all urgent care cases
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$SPECIALTY)))
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$DEPT_NM)))
#FULL JOIN in the medical orders from the visit
children_dx <- merge(children_dx,medOrdrs,on="VISIT_KEY")
str(children_dx)
#make indicator for anaphylaxis within at least one of the diagnosis lines
children_dx$ANAPH_DX_IND <- as.integer(
ave(tolower(children_dx$DX_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("anaphylaxis", x))))
)
#make indicator for epinephrine within at least one of the medical order lines
children_dx$EPI_ORDER_IND <- as.integer(
ave(tolower(children_dx$MED_ORD_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("epinephrine", x))))
)
#get data frame of only outpatient encounter after Aug 1 2014 for patients between the age of 1 and 18
outpatient_visits <- visit[visit$DICT_ENC_TYPE_KEY == 108,]
outpatient_visits <- subset(outpatient_visits, outpatient_visits$CONTACT_DT_KEY > 20140801)
outpatient_visits <- subset(outpatient_visits, outpatient_visits$AGE >= 1 & outpatient_visits$AGE <= 18)
children_dx[children_dx$PAT_KEY == 10366753,]
outpatient_visits[outpatient_visits$PAT_KEY == 10366753,]
children_dx[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","APPT_CHECKIN_DT","MED_ORD_KEY")]
test_pt_hospital_visits[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","HOSP_DISCHRG_DT","MED_ORD_ID")]
outpatient_visits$APPT_CHECKIN_DT <- strptime(x = as.character(outpatient_visits$APPT_CHECKIN_DT),
format = "%Y-%m-%d %H:%M:%S")
children_dx$HOSP_DISCHRG_DT <- strptime(x = as.character(children_dx$HOSP_DISCHRG_DT),
format = "%Y-%m-%d %H:%M:%S")
#create indicator if patient has a follow up
for (i in 1:length(outpatient_visits$APPT_CHECKIN_DT)) {
children_dx$HAD_FOLLOWUP[i] <-
ifelse(children_dx$PAT_KEY[i] %in% outpatient_visits$PAT_KEY,#print(1),print(0))}
1,0)
}
table(children_dx$HAD_FOLLOWUP)
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
dept <- read.csv("department.csv")
dx <- read.csv("diagnosis.csv")
medOrdrs <- read.csv("medication_order.csv")
visit <- read.csv("visit.csv")
visit_Dx <- read.csv("visit_diagnosis.csv")
#inspect
str(dept)
str(dx)
str(medOrdrs)
head(medOrdrs)
str(visit)
head(visit)
str(visit_Dx)
#subset data frame into only hospital encounters
#hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83
hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83)
str(hospital_visits)
class(hospital_visits$CONTACT_DT_KEY)
#subset hospital encounters after to August 1 2014
afterAug14 <- subset(hospital_visits, hospital_visits$CONTACT_DT_KEY > 20140801)
str(afterAug14)
class(afterAug14$AGE)
#patients between 1 and 18 years of age
children <- subset(afterAug14, afterAug14$AGE >= 1 & afterAug14$AGE <= 18)
summary(children)
head(children)
#INNER JOIN children with the visit diagnoses dataset to get all diagnoses that occured within each visit
#visit_Dx[visit_Dx$VISIT_KEY == 83068068,]
#children[children$VISIT_KEY == 83250029,]
children <- merge(children,visit_Dx[c("VISIT_KEY","DX_KEY","SEQ_NUM","DX_CMT","HSP_ACCT_KEY","DICT_DX_STS_KEY")]
, by = "VISIT_KEY")
str(children)
head(children)
#INNER JOIN children with the diagnoses codes dataset to get all ICD9 diagnoses codes
class(dx$ICD9_CD)
children_dx <- merge(children,dx[c("DX_ID","DX_KEY","DX_NM","ICD9_CD")],on="DX_KEY",all.x = TRUE)
str(children_dx)
#children_dx[children_dx$VISIT_KEY == 83692613,]
#subset data into only an Emergency Department diagnosis (primary or secondary)  of anaphylaxis or allergic reaction
children_dx <- subset(children_dx, children_dx$DICT_DX_STS_KEY %in% c(313,314))
codes <- c("995.0", "995.3", "995.6", "995.60", "995.61", "995.62", "995.63", "995.64", "995.65", "995.66", "995.67", "995.68",
"995.69","995.7","999.4","999.41","999.42","999.49")
#children_dx[children_dx$VISIT_KEY == 83692613,]
children_dx <- subset(children_dx, children_dx$ICD9_CD %in% codes)
str(children_dx)
head(children_dx)
#LEFT JOIN children with the department dataset to get all department of the encounter
#children_dx <- merge(children_dx,dept[c("DEPT_KEY","DEPT_NM","SPECIALTY","DEBT_ABBR","DEPT_GROUP")],on="DEPT_KEY")
children_dx <- merge(children_dx,dept,on="DEPT_KEY",all.x = TRUE)
str(children_dx)
#remove all urgent care cases
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$SPECIALTY)))
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$DEPT_NM)))
#FULL JOIN in the medical orders from the visit
children_dx <- merge(children_dx,medOrdrs,on="VISIT_KEY")
str(children_dx)
#make indicator for anaphylaxis within at least one of the diagnosis lines
children_dx$ANAPH_DX_IND <- as.integer(
ave(tolower(children_dx$DX_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("anaphylaxis", x))))
)
#make indicator for epinephrine within at least one of the medical order lines
children_dx$EPI_ORDER_IND <- as.integer(
ave(tolower(children_dx$MED_ORD_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("epinephrine", x))))
)
#get data frame of only outpatient encounter after Aug 1 2014 for patients between the age of 1 and 18
outpatient_visits <- visit[visit$DICT_ENC_TYPE_KEY == 108,]
outpatient_visits <- subset(outpatient_visits, outpatient_visits$CONTACT_DT_KEY > 20140801)
outpatient_visits <- subset(outpatient_visits, outpatient_visits$AGE >= 1 & outpatient_visits$AGE <= 18)
children_dx[children_dx$PAT_KEY == 10366753,]
outpatient_visits[outpatient_visits$PAT_KEY == 10366753,]
children_dx[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","APPT_CHECKIN_DT","MED_ORD_KEY")]
test_pt_hospital_visits[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","HOSP_DISCHRG_DT","MED_ORD_ID")]
outpatient_visits$APPT_CHECKIN_DT <- strptime(x = as.character(outpatient_visits$APPT_CHECKIN_DT),
format = "%Y-%m-%d %H:%M:%S")
children_dx$HOSP_DISCHRG_DT <- strptime(x = as.character(children_dx$HOSP_DISCHRG_DT),
format = "%Y-%m-%d %H:%M:%S")
#create indicator if patient has a follow up
for (i in 1:length(outpatient_visits$APPT_CHECKIN_DT)) {
children_dx$HAD_FOLLOWUP[i] <-
ifelse(children_dx$PAT_KEY[i] %in% outpatient_visits$PAT_KEY,#print(1),print(0))}
1,0)
}
table(children_dx$HAD_FOLLOWUP)
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
dept <- read.csv("department.csv")
getwd()
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
numbers <- rnorm(1000)
summary(numbers)
sd(numbers)
mean(numbers)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
if (numbers[i] <= 1 & numbers[i] >= -1) {#|| numbers[i] <= sd(numbers)) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
if (numbers[i] <= 1 && numbers[i] >= -1) {#|| numbers[i] <= sd(numbers)) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
#if (num(bers[i]) <= 1 && numbers[i] >= -1) {#|| numbers[i] <= sd(numbers)) {
#   betweenNegPosOne <- betweenNegPosOne + 1
#}
print(i)
}
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
if (i <= 1 && i >= -1) {#|| numbers[i] <= sd(numbers)) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount
numbers <- rnorm(10000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#if within 1 SD of the mean = 0 for normal distribution
if (i <= 1 && i >= -1) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount #= 0.678 which is close to our expected .682
numbers <- rnorm(100000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#if within 1 SD of the mean = 0 for normal distribution
if (i <= 1 && i >= -1) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount #= 0.6856 which is close to our expected .682
numbers <- rnorm(1000000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#if within 1 SD of the mean = 0 for normal distribution
if (i <= 1 && i >= -1) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount #= 0.68309 which is close to our expected .682
# have only been supplied vectors + need to create the matrices yourself.
# Matrices:
# - FreeThrows
# - FreeThrowAttempts
#Seasons are labeled based on the first year in the season
#   E.g. the 2012-2013 season is preseneted as simply 2012
#Notes and Corrections to the data:
#Kevin Durant: 2006 - College Data Used
#Kevin Durant: 2005 - Proxied With 2006 Data
#Derrick Rose: 2012 - Did Not Play
#Derrick Rose: 2007 - College Data Used
#Derrick Rose: 2006 - Proxied With 2007 Data
#Derrick Rose: 2005 - Proxied With 2007 Data
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
#Matrix
freeThrows <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT, DwightHoward_FT, ChrisBosh_FT,
ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT, DwayneWade_FT)
rownames(freeThrows) <- Players
colnames(freeThrows) <- Seasons
rm(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT, DwightHoward_FT, ChrisBosh_FT,
ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT, DwayneWade_FT)
#Free Throw Attempts
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
freeThrowAttempts <- rbind(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA, DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA, DwayneWade_FTA)
rownames(freeThrowAttempts) <- Players
colnames(freeThrowAttempts) <- Seasons
rm(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA, DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA, DwayneWade_FTA)
#Games
KobeBryant_G <- c(80,77,82,82,73,82,58,78,6,35)
JoeJohnson_G <- c(82,57,82,79,76,72,60,72,79,80)
LeBronJames_G <- c(79,78,75,81,76,79,62,76,77,69)
CarmeloAnthony_G <- c(80,65,77,66,69,77,55,67,77,40)
DwightHoward_G <- c(82,82,82,79,82,78,54,76,71,41)
ChrisBosh_G <- c(70,69,67,77,70,77,57,74,79,44)
ChrisPaul_G <- c(78,64,80,78,45,80,60,70,62,82)
KevinDurant_G <- c(35,35,80,74,82,78,66,81,81,27)
DerrickRose_G <- c(40,40,40,81,78,81,39,0,10,51)
DwayneWade_G <- c(75,51,51,79,77,76,49,69,54,62)
#Matrix
Games <- rbind(KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G)
colnames(Games) <- Seasons
rownames(Games) <- Players
rm(KobeBryant_G, JoeJohnson_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, LeBronJames_G, ChrisPaul_G, DerrickRose_G, DwayneWade_G, KevinDurant_G)
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
#default parameter in case user doesn't pass an arg
defCustomPlot <- function(dataset.data, dataset.lines= Players, rows=1:10){
Data <- dataset.data[rows,,drop=FALSE]
matplot(t(Data), type="b", pch=15:18, col=(c(1:4,6)))
legend("bottomleft", inset = 0.01, legend = dataset.lines[rows], pch=15:18, col=(c(1:4,6)))
}
#FT Attempts Per Game
defCustomPlot(freeThrowAttempts/Games)
#wide variety, shart drop for Kobe + Rose b/c injury, drops for Howards and Durant too
#FT %
defCustomPlot(freeThrows/freeThrowAttempts)
#Howard has by far worst FT% despite having high # of , all others quite high (75%+)
#Player playing style (2 vs. 3 pt. preference), excluding FT's
defCustomPlot((Points-freeThrows)/FieldGoals)
#Joe Johnson has most 3FG's, Howard w/ least, Jobe, Paul, Rose, next highest
#and Wade next lowest
defCustomPlot(freeThrowAttempts/Games)
setwd("C:/Users/Nimz/Dropbox/RunningAnalysis/Data")
