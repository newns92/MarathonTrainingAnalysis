(613+70)/(613+70+9+472)
wikiWords2$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsRemoved = rowSums(as.matrix(dtmRemoved))
averages(wikiWords2$NumWordsAdded)
mean(wikiWords2$NumWordsAdded)
mean(wikiWords2$NumWordsRemoved) #4.050052 words added
table(wikiTest$Vandal)
rm(list = ls(all = TRUE))
setwd("C:/Users/snewns/Dropbox/NewLearn/Edx/AnalyticsEdge/Data")
wiki <- read.csv("wiki.csv")
wiki$Vandal <- as.factor(wiki$Vandal)
summary(wiki$Vandal)
corpusAdded <- Corpus(VectorSource(wiki$Added))
corpusAdded  #3876 documents
corpusAdded <- tm_map(corpusAdded, removeWords,  stopwords("english"))
corpusAdded[[1]]$content
corpusAdded <- tm_map(corpusAdded, stemDocument)
corpusAdded[[1]]$content
#Build DocumentTermMatrix, dtmAdded.
dtmAdded <- DocumentTermMatrix(corpusAdded)
dtmAdded
corpusAdded <- Corpus(VectorSource(wiki$Added))
corpusAdded  #3876 documents
corpusAdded <- tm_map(corpusAdded, removeWords,  stopwords("english"))
corpusAdded[[1]]$content
corpusAdded <- tm_map(corpusAdded, stemDocument)
corpusAdded[[1]]$content
#Build DocumentTermMatrix, dtmAdded.
dtmAdded <- DocumentTermMatrix(corpusAdded)
dtmAdded
#6675 terms
#Filter out sparse terms by keeping only terms that appear in 0.3% or more of the revisions
sparseAdded <- removeSparseTerms(dtmAdded, 0.997)
sparseAdded #166 terms
#Convert sparseAdded to a data frame, wordsAdded
wordsAdded <- as.data.frame(as.matrix(sparseAdded))
#prepend all the words w/ the letter A
colnames(wordsAdded) = paste("A", colnames(wordsAdded))
#Repeat above steps for wordsRemoved but prepend all words w/ "R"
corpusRemoved <- Corpus(VectorSource(wiki$Removed))
corpusRemoved <- tm_map(corpusRemoved, removeWords,  stopwords("english"))
corpusRemoved <- tm_map(corpusRemoved, stemDocument)
dtmRemoved <- DocumentTermMatrix(corpusRemoved)
sparseRemoved <- removeSparseTerms(dtmRemoved, 0.997)
sparseRemoved
wordsRemoved <- as.data.frame(as.matrix(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
wikiWords = cbind(wordsAdded, wordsRemoved)
wikiWords$Vandal <- wiki$Vandal
set.seed(123)
spl <- sample.split(wikiWords, SplitRatio =  0.7)
wikiTrain <- subset(wikiWords, spl == TRUE)
wikiTest <- subset(wikiWords, spl == FALSE)
wikiCART <- rpart(Vandal ~ ., data = wikiTrain, method = "class")
prp(wikiCART)
table(wikiTest$Vandal)
wiki <- read.csv("wiki.csv")
wiki$Vandal <- as.factor(wiki$Vandal)
summary(wiki$Vandal)
corpusAdded <- Corpus(VectorSource(wiki$Added))
corpusAdded <- tm_map(corpusAdded, removeWords,  stopwords("english"))
corpusAdded <- tm_map(corpusAdded, stemDocument)
dtmAdded <- DocumentTermMatrix(corpusAdded)
dtmAdded
sparseAdded <- removeSparseTerms(dtmAdded, 0.997)
sparseAdded
wordsAdded <- as.data.frame(as.matrix(sparseAdded))
colnames(wordsAdded) = paste("A", colnames(wordsAdded))
corpusRemoved <- Corpus(VectorSource(wiki$Removed))
corpusRemoved <- tm_map(corpusRemoved, removeWords,  stopwords("english"))
corpusRemoved <- tm_map(corpusRemoved, stemDocument)
dtmRemoved <- DocumentTermMatrix(corpusRemoved)
sparseRemoved <- removeSparseTerms(dtmRemoved, 0.997)
sparseRemoved
wordsRemoved <- as.data.frame(as.matrix(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
str(wordsRemoved)
colnames(wordsAdded) = paste("A", colnames(wordsAdded))
wordsAdded
rm(list = ls(all = TRUE))
setwd("C:/Users/snewns/Dropbox/NewLearn/Edx/AnalyticsEdge/Data")
wiki <- read.csv("wiki.csv")
wiki$Vandal <- as.factor(wiki$Vandal)
summary(wiki$Vandal)
#1815 cases of vandalism were detected in the history of this page?
'Use the bag of words approach to build a model
- We have 2 columns of textual data, w/ different meanings
- Ex: *Adding* rude words has a different meaning to *removing* rude words'
library(tm)
library(SnowballC)
corpusAdded <- Corpus(VectorSource(wiki$Added))
corpusAdded  #3876 documents
corpusAdded <- tm_map(corpusAdded, removeWords,  stopwords("english"))
corpusAdded[[1]]$content
corpusAdded <- tm_map(corpusAdded, stemDocument)
corpusAdded[[1]]$content
#Build DocumentTermMatrix, dtmAdded.
dtmAdded <- DocumentTermMatrix(corpusAdded)
dtmAdded
#6675 terms
#Filter out sparse terms by keeping only terms that appear in 0.3% or more of the revisions
sparseAdded <- removeSparseTerms(dtmAdded, 0.997)
sparseAdded #166 terms
#Convert sparseAdded to a data frame, wordsAdded
wordsAdded <- as.data.frame(as.matrix(sparseAdded))
#prepend all the words w/ the letter A
colnames(wordsAdded) = paste("A", colnames(wordsAdded))
#Repeat above steps for wordsRemoved but prepend all words w/ "R"
corpusRemoved <- Corpus(VectorSource(wiki$Removed))
corpusRemoved <- tm_map(corpusRemoved, removeWords,  stopwords("english"))
corpusRemoved <- tm_map(corpusRemoved, stemDocument)
dtmRemoved <- DocumentTermMatrix(corpusRemoved)
sparseRemoved <- removeSparseTerms(dtmRemoved, 0.997)
sparseRemoved
wordsRemoved <- as.data.frame(as.matrix(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
str(wordsRemoved) #162 words (columns)
wikiWords = cbind(wordsAdded, wordsRemoved)
wikiWords$Vandal <- wiki$Vandal
library(caTools)
set.seed(123)
set.seed(123)
spl <- sample.split(wikiWords$Vandal, SplitRatio =  0.7)
wikiTrain <- subset(wikiWords, spl == TRUE)
wikiTest <- subset(wikiWords, spl == FALSE)
wikiCART <- rpart(Vandal ~ ., data = wikiTrain, method = "class")
prp(wikiCART)
table(wikiTest$Vandal)
fancyRpartPlot(wikiCART)
618/nrow(wikiTest)
predictWikiCART <- predict(wikiCART, newdata = wikiTest, type = "class")
table(wikiTest$Vandal, predictWikiCART)
(618+12)/(618+12+0+533)
table(wikiTraint$Vandal, predictWikiCART)
table(wikiTrain$Vandal, predictWikiCART)
wikiWords2 = wikiWords
wikiWords2$http = ifelse(grepl("http", wiki$Added, fixed = TRUE), 1, 0)
table(wikiWords2$http)
wikiTrain2 = subset(wikiWords2, spl == TRUE)
wikiTest2 = subset(wikiWords2, spl == FALSE)
wikiCART2 <- rpart(Vandal ~ ., data = wikiTrain2, method = "class")
prp(wikiCART2)
fancyRpartPlot(wikiCART2)
table(wikiTest2$Vandal)
618/nrow(wikiTest2) #Acc = 0.5343643 = 53.44%
predictWikiCART2 <- predict(wikiCART2, newdata = wikiTest2, type = "class")
table(wikiTest$Vandal, predictWikiCART2)
(609+57)/(609+57+9+488)
wikiWords2$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsRemoved = rowSums(as.matrix(dtmRemoved))
mean(wikiWords2$NumWordsAdded) #4.050052 words added
mean(wikiWords2$NumWordsRemoved) #3.5129 words added
table(wikiTest$Vandal, predictWikiCART2)
wikiTrain3 = subset(wikiWords2, spl == TRUE)
wikiTest3 = subset(wikiWords2, spl == FALSE)
wikiCART3 <- rpart(Vandal ~ ., data = wikiTrain3, method = "class")
prp(wikiCART2)
predictWikiCART3 <- predict(wikiCART3, newdata = wikiTest3, type = "class")
table(wikiTest$Vandal, predictWikiCART2)
table(wikiTest2$Vandal, predictWikiCART2)
table(wikiTest3$Vandal, predictWikiCART2)
table(wikiTest3$Vandal, predictWikiCART3)
(514+248)/(514+248+104+297)
wikiWords3 = wikiWords2
wikiWords3$Minor = wiki$Minor
wikiWords3$Loggedin = wiki$Loggedin
wikiTrain4 = subset(wikiWords3, spl == TRUE)
wikiTest4 = subset(wikiWords3, spl == FALSE)
wikiCART4 <- rpart(Vandal ~ ., data = wikiTrain4, method = "class")
prp(wikiCART4)
predictWikiCART4 <- predict(wikiCART4, newdata = wikiTest4, type = "class")
table(wikiTest4$Vandal, predictWikiCART4)
(595+241)/(595+241+23+304)
rm(list - ls(all = TRUE))
rm(list = ls(all = TRUE))
library(caret)
library(randomForest)
library(corrplot)
library(mice)
setwd("C:/Users/snewns/Dropbox/NewLearn/R/KaggleComp/titanic")
titanicTrain <- read.csv("train.csv")
titanicTest <- read.csv("test.csv")
str(titanicTrain)
titanicTest$Survived <- rep(0,418)
str(titanicTest)
prop.table(table(titanicTrain$Survived))
plotTable <- table(titanicTrain$Survived,titanicTrain$Sex)
barplot(plotTable, xlab = "Gender", ylab = "Number of People",
main = "Total Number of Survivors segmented by Gender",
col=c("red","green"))
prop.table(table(titanicTrain$Sex,titanicTrain$Survived),margin=1)
titanicTest$Survived[titanicTest$Sex == 'female'] <- 1
table(titanicTest$Survived)
summary(titanicTrain$Age)
simple = titanicTrain[c("Age","Pclass","Sex","SibSp","Parch","Fare")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
titanicTrain$Age = imputed$Age
summary(titanicTrain)
titanicTrain$Child <- NA
titanicTrain$Child[titanicTrain$Age < 18] <- 1
titanicTrain$Child[titanicTrain$Age >= 18] <- 0
table(titanicTrain$Child)
prop.table(table(titanicTrain$Child,titanicTrain$Survived),margin=1)
aggregate(Survived ~ Child + Sex, data=titanicTrain, FUN=function(x) {sum(x)/length(x)})
Pclass_survival <- table(titanicTrain$Survived, titanicTrain$Pclass)
barplot(Pclass_survival, xlab = "Cabin Class", ylab = "Number of People",
main = "Total Number of Survivors segmented by Cabin Class",
col=c("red","green"))
aggregate(Survived ~ Pclass + Sex, data=titanicTrain, FUN=function(x) {sum(x)/length(x)})
titanicTest$Survived[titanicTest$Sex == 'male' & titanicTest$Pclass == 1] <- 1
titanicTrain$FareBin <- '30+'
titanicTrain$FareBin[titanicTrain$Fare < 30 & titanicTrain$Fare >= 20] <- '20-30'
titanicTrain$FareBin[titanicTrain$Fare < 20 & titanicTrain$Fare >= 10] <- '10-20'
titanicTrain$FareBin[titanicTrain$Fare < 10] <- '<10'
titanicTest$FareBin <- '30+'
titanicTest$FareBin[titanicTest$Fare < 30 & titanicTest$Fare >= 20] <- '20-30'
titanicTest$FareBin[titanicTest$Fare < 20 & titanicTest$Fare >= 10] <- '10-20'
titanicTest$FareBin[titanicTest$Fare < 10] <- '<10'
aggregate(Survived ~ FareBin + Pclass + Sex, data=titanicTrain, FUN=function(x) {sum(x)/length(x)})
library(rpart)
library(rpart)
titanicCART <- rpart(Survived ~ ., data = titanicTest, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
names(titanic)
names(titanicTest)
head(titanicTest)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SipSp + Parch + Fare + Cabin + Embarked,
data = titanicTest, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Cabin + Embarked,
data = titanicTest, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
titanicCART2 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Cabin + Embarked,
data = titanicTest, method = "class")
fancyRpartPlot(titanicCART2)
titanicCART2 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTest, method = "class")
fancyRpartPlot(titanicCART2)
fancyRpartPlot(titanicCART2)
titanicCART2 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTest, method = "class")
fancyRpartPlot(titanicCART2)
fancyRpartPlot(titanicCART)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Cabin + Embarked,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method = "class")
fancyRpartPlot(titanicCART)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Child,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Child,
data = titanicTrain, method = "class")
fancyRpartPlot(titanicCART)
head(titanicTest)
titanicCART <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Child,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
library(rpart)
library(rpart.plot)
head(titanicTest)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
firstTreePrediction <- predict(titanicCART, titanicTest, type = "class")
submit <- data.frame(PassengerId = titanicTest$PassengerId, Survived = firstTreePrediction)
write.csv(submit, file = "firstTreePrediction", row.names = FALSE)
firstTreePrediction <- predict(titanicCART, titanicTest, type = "class")
submit <- data.frame(PassengerId = titanicTest$PassengerId, Survived = firstTreePrediction)
write.csv(submit, file = "firstTreePrediction.csv", row.names = FALSE)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method="class")
firstTreePrediction <- predict(titanicCART, titanicTest, type = "class")
submit <- data.frame(PassengerId = titanicTest$PassengerId, Survived = firstTreePrediction)
write.csv(submit, file = "firstTreePrediction2.csv", row.names = FALSE)
titanicTrain <- read.csv("train.csv")
titanicTest <- read.csv("test.csv")
titanicTest$Survived <- rep(0,418)
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
simple = titanicTrain[c("Age","Pclass","Sex","SibSp","Parch","Fare")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
titanicTrain$Age = imputed$Age
titanicCART <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method = "class")
library(RColorBrewer)
library(rattle)
fancyRpartPlot(titanicCART)
titanicTrain <- read.csv("train.csv")
titanicTest <- read.csv("test.csv")
titanicTest$Survived <- rep(0,418)
titanicCART2 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = titanicTrain, method = "class")
fancyRpartPlot(titanicCART2)
secondTreePrediction <- predict(titanicCART2, titanicTest, type = "class")
submit <- data.frame(PassengerId = titanicTest$PassengerId, Survived = secondTreePrediction)
write.csv(submit, file = "firstTreePrediction2.csv", row.names = FALSE)
secondTreePrediction <- predict(titanicCART2, titanicTest, type = "class")
submit <- data.frame(PassengerId = titanicTest$PassengerId, Survived = secondTreePrediction)
write.csv(submit, file = "firstTreePrediction2.csv", row.names = FALSE)
setwd("C:/Users/snewns/Dropbox/RunningAnalysis/Data")
rm(list = ls(all = TRUE))
setwd("C:/Users/snewns/Dropbox/RunningAnalysis/Data")
garmin <- read.csv("garmin.csv")
keepCols <- NA
keepCols <- c("Activity.Id", "When", "Type", "Gear", "Name", "Dist.mi", "Elv.ft", "Elapsed.Time", "Moving.Time",
"Speed.mph", "Pace..mi", "Max.Pace..mi", "Cad", "Heart", "Max.Heart", "Elev.Dist.ft.mi",
"Elev.Time.ft.h", "Cal", "Segs", "PRs", "Kudos")
newGarmin <- garmin[keepCols]
str(newGarmin)
strava1 <- read.csv("strava1.csv")
strava6 <- read.csv("strava6.csv")
strava2 <- read.csv("strava2.csv")
strava3 <- read.csv("strava3.csv")
strava4 <- read.csv("strava4.csv")
strava5 <- read.csv("strava5.csv")
stravaFull <- Reduce(function(...) merge(..., all=TRUE), list(strava1, strava2, strava3, strava4,
strava5, strava6))
str(stravaFull)
summary(stravaFull)
str(stravaFull)
summary(stravaFull)
summary(stravaFull)
newGarmin$Date <- str_split_fixed(newGarmin$When, " ", 2)[,1]
newGarmin$StartTime <- str_split_fixed(newGarmin$When, " ", 2)[,2]
library(stringr)
newGarmin$Date <- str_split_fixed(newGarmin$When, " ", 2)[,1]
newGarmin$StartTime <- str_split_fixed(newGarmin$When, " ", 2)[,2]
which(newGarmin$Date == '9/12/2016')
newGarmin[68:71,]
newGarmin[67:72,]
which(newGarmin$Date == '8/12/2016')
newGarmin[95:96,]
head(stravaFull)
library(tidyr)
vars <- c("Date", "StartTime")
separate(stravaFull, Start, into = vars, sep = "[d]:", extra = "drop", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "6 :", extra = "drop", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "6 ", extra = "drop", remove = TRUE)
?separate
?separate(stravaFull, Start, into = vars, sep = "6 ", extra = "merge", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "6 ", extra = "merge", remove = TRUE)
?separate(stravaFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "(?<=6)", extra = "merge", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
stravaFull <- read.csv("fullStrava.csv")
summary(stravaFull)
write.csv(stravaFull, file = "stravaFull.csv", row.names = FALSE)
stravaFull <- Reduce(function(...) merge(..., all=TRUE), list(strava1, strava2, strava3, strava4,
strava5, strava6))
#2 random records throwing things off, delete in Excel and reload
write.csv(stravaFull, file = "stravaFull.csv", row.names = FALSE)
stravaFull <- Reduce(function(...) merge(..., all=TRUE), list(strava1, strava2, strava3, strava4,
strava5, strava6))
#2 random records throwing things off, delete in Excel and reload
write.csv(stravaFull, file = "stravaFull.csv", row.names = FALSE)
stravaFull <- read.csv("fullStrava.csv")
str(stravaFull)
summary(stravaFull)
separate(stravaFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
testStravaFull <- separate(stravaFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
testStravaFull[testStravaFull(Date),]
testStravaFull[order(Date),]
testStravaFull[order("Date"),]
testStravaFull
testStravaFull[order(testStravaFull$Date),]
testStravaFull[order(testStravaFull$Time),]
separate(stravaFull, Start, into = vars, sep = "(?<=, )", extra = "merge", remove = TRUE)
vars2 <- c("DOW", "Date")
separate(stravaFull, Start, into = vars2, sep = "(?<=, )", extra = "merge", remove = TRUE)
separate(stravaFull, Start, into = vars2, sep = ", ", extra = "merge", remove = TRUE)
separate(stravaFull, Start, into = vars, sep = "(?<=6 )", extra = "merge", remove = TRUE)
separate(testStravaFull, Date, into = vars2, sep = ", ", extra = "merge", remove = TRUE)
testStravaFull <- separate(testStravaFull, Date, into = vars2, sep = ", ", extra = "merge", remove = TRUE)
testStravaFull[order(testStravaFull$Date),]
dates <- c("Aug 10, 2016", "Aug 10, 2016")
as.Date(dates,format = "%m/%d/%y")
dates
dates <- c("Aug 10, 2016", "Aug 10, 2016")
as.Date(dates,format = "%m/%d/%y")
as.Date(dates,format = "%B, %d, %y")
as.Date(dates,format = "%b, %d, %y")
as.Date(dates,format = "%a, %d, %y")
format(dates,"%a, %d, %y")
format(dates,"%a %d %y")
format(dates,"%m %d %y")
as.Date.date(dates,format = "%m %d %y")
as.Date(dates,format = "%m %d %y")
as.Date.character(dates,format = "%m %d %y"))
as.Date.character(dates,format = "%m %d %y")
library(grepl)
install.packages("grepl")
library(grepl)
install.packages("grep")
library(grep)
library(grepl)
ifelse(grep("Aug",testStravaFull$Date),1,0
)
test <- ifelse(grep("Aug",testStravaFull$Date),1,0)
table(test)
testStravaFull$Date
test <- ifelse(grep("Jul",testStravaFull$Date),1,0)
table(test)
test <- ifelse(grepl("Jul",testStravaFull$Date),1,0)
table(test)
ifelse(grepl("Jan",testStravaFull$Date),1,0)
test <- ifelse(grepl("Jan",testStravaFull$Date),1,
ifelse(grepl("Feb",testStravaFull$Date),2,
ifelse(grepl("Mar",testStravaFull$Date),3,
ifelse(grepl("Apr",testStravaFull$Date),4,
ifelse(grepl("May",testStravaFull$Date),5,
ifelse(grepl("Jun",testStravaFull$Date),6,
ifelse(grepl("Jul",testStravaFull$Date),7,
ifelse(grepl("Aug",testStravaFull$Date),8,
ifelse(grepl("Sep",testStravaFull$Date),9,
ifelse(grepl("Oct",testStravaFull$Date),10,
ifelse(grepl("Nov",testStravaFull$Date),11,
ifelse(grepl("Dec",testStravaFull$Date),12))))))))))))
ifelse(grepl("Jan",testStravaFull$Date),1,
ifelse(grepl("Feb",testStravaFull$Date),2,
ifelse(grepl("Mar",testStravaFull$Date),3,
ifelse(grepl("Apr",testStravaFull$Date),4,
ifelse(grepl("May",testStravaFull$Date),5,
ifelse(grepl("Jun",testStravaFull$Date),6,
ifelse(grepl("Jul",testStravaFull$Date),7,
ifelse(grepl("Aug",testStravaFull$Date),8,
ifelse(grepl("Sep",testStravaFull$Date),9,
ifelse(grepl("Oct",testStravaFull$Date),10,
ifelse(grepl("Nov",testStravaFull$Date),11,
ifelse(grepl("Dec",testStravaFull$Date),12))))))))))))
felse(grepl("Jan",testStravaFull$Date),1,
ifelse(grepl("Feb",testStravaFull$Date),2,
ifelse(grepl("Mar",testStravaFull$Date),3,
ifelse(grepl("Apr",testStravaFull$Date),4,
ifelse(grepl("May",testStravaFull$Date),5,
ifelse(grepl("Jun",testStravaFull$Date),6,
ifelse(grepl("Jul",testStravaFull$Date),7,
ifelse(grepl("Aug",testStravaFull$Date),8,
ifelse(grepl("Sep",testStravaFull$Date),9,
ifelse(grepl("Oct",testStravaFull$Date),10,
ifelse(grepl("Nov",testStravaFull$Date),11,
ifelse(grepl("Dec",testStravaFull$Date),12,0))))))))))))
ifelse(grepl("Jan",testStravaFull$Date),1,
ifelse(grepl("Feb",testStravaFull$Date),2,
ifelse(grepl("Mar",testStravaFull$Date),3,
ifelse(grepl("Apr",testStravaFull$Date),4,
ifelse(grepl("May",testStravaFull$Date),5,
ifelse(grepl("Jun",testStravaFull$Date),6,
ifelse(grepl("Jul",testStravaFull$Date),7,
ifelse(grepl("Aug",testStravaFull$Date),8,
ifelse(grepl("Sep",testStravaFull$Date),9,
ifelse(grepl("Oct",testStravaFull$Date),10,
ifelse(grepl("Nov",testStravaFull$Date),11,
ifelse(grepl("Dec",testStravaFull$Date),12,0))))))))))))
test <- ifelse(grepl("Jan",testStravaFull$Date),1,
ifelse(grepl("Feb",testStravaFull$Date),2,
ifelse(grepl("Mar",testStravaFull$Date),3,
ifelse(grepl("Apr",testStravaFull$Date),4,
ifelse(grepl("May",testStravaFull$Date),5,
ifelse(grepl("Jun",testStravaFull$Date),6,
ifelse(grepl("Jul",testStravaFull$Date),7,
ifelse(grepl("Aug",testStravaFull$Date),8,
ifelse(grepl("Sep",testStravaFull$Date),9,
ifelse(grepl("Oct",testStravaFull$Date),10,
ifelse(grepl("Nov",testStravaFull$Date),11,
ifelse(grepl("Dec",testStravaFull$Date),12,NA))))))))))))
table(test)
which(testStravaFull$Date == grepl("Oct",testStravaFull$Date))
grepl("Oct",testStravaFull$Date)
testStravaFull$monthNum <- ifelse(grepl("Jan",testStravaFull$Date),1,
ifelse(grepl("Feb",testStravaFull$Date),2,
ifelse(grepl("Mar",testStravaFull$Date),3,
ifelse(grepl("Apr",testStravaFull$Date),4,
ifelse(grepl("May",testStravaFull$Date),5,
ifelse(grepl("Jun",testStravaFull$Date),6,
ifelse(grepl("Jul",testStravaFull$Date),7,
ifelse(grepl("Aug",testStravaFull$Date),8,
ifelse(grepl("Sep",testStravaFull$Date),9,
ifelse(grepl("Oct",testStravaFull$Date),10,
ifelse(grepl("Nov",testStravaFull$Date),11,
ifelse(grepl("Dec",testStravaFull$Date),12,NA))))))))))))
head(testStravaFull)
