str(arbuthnot$girls)
plot(arbuthnot$year,arbuthnot$girls)
plot(arbuthnot$year,arbuthnot$girls)
dim(arbuthnot)
install.packages("knitr")
library(knitr)
names(arbuthnot)
knit_with_parameters('C:/Users/Nimz/Dropbox/NewLearn/Coursera/R/DukeStatsWithR/Course1_IntroToProb/week1_knitr_test.Rmd')
unlink('C:/Users/Nimz/Dropbox/NewLearn/Coursera/R/DukeStatsWithR/Course1_IntroToProb/week1_knitr_test_cache', recursive = TRUE)
knit_with_parameters('C:/Users/Nimz/Dropbox/NewLearn/Coursera/R/DukeStatsWithR/Course1_IntroToProb/week1_knitr_test.Rmd')
range(arbuthnot$year)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
?stderr
sd(numbers)
stdDevCounter = 0;
for(i in numbers){
if (sd(numbers[i]) >= -1 & sd(numbers[i]) <= 1) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCoutn <- stdDevCounter/nrow(numbers)
stdDevCounter = 0;
for(i in numbers){
if (sd(numbers[i]) >= -1 && sd(numbers[i]) <= 1) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/nrow(numbers)
numbers[1]
sd(numbers[1])
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) && numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
sd(numbers[1]) <= sd(numbers)
sd(numbers[1]) == sd(numbers)
sd(numbers[1])
numbers[1] == sd(numbers)
numbers[1] <= sd(numbers)
stdDevCounter = 0;
for(i in numbers){
#if (numbers[i] >= -sd(numbers) && numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
#}
}
totalCount <- stdDevCounter/nrow(numbers)
nrow(numbers)
numbers
count(numbers)
as.matrix(nrow(numbers))
length(numbers)
stdDevCounter = 0;
for(i in numbers){
#if (numbers[i] >= -sd(numbers) && numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
#}
}
totalCount <- stdDevCounter/length(numbers)
rm("totalCoutn")
numbers[1] <= sd(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) && numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
numbers <- rnorm(10000)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) && numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) | numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
numbers[1] <= sd(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) | numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] >= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
head(numbers)
std
numbers[1] <= -sd(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
numbers[1] <= -sd(numbers) || numbers[1] <= sd(numbers)
numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
stdDevCounter = 0;
for(i in numbers){
if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
i <- 0
stdDevCounter <- 0;
for(i in numbers){
if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
i <- 0
for(i in numbers){
if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
i <- 0
stdDevCounter <- 0;
for(i in numbers){
numbers[i]
# if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
#    stdDevCounter <- stdDevCounter + 1
# }
}
stdDevCounter <- 0;
for(i in numbers){
print(numbers[i])
# if (numbers[i] <= -sd(numbers) || numbers[i] <= sd(numbers)) {
#    stdDevCounter <- stdDevCounter + 1
# }
}
stdDevCounter <- 0;
for(i in numbers){
#print(numbers[i])
if (numbers[i] <= -sd(numbers)) {#|| numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
i <- 0
stdDevCounter <- 0;
for(i in numbers){
#print(numbers[i])
if (numbers[i] <= mean(numbers)-sd(numbers)) {#|| numbers[i] <= sd(numbers)) {
stdDevCounter <- stdDevCounter + 1
}
}
totalCount <- stdDevCounter/length(numbers)
numbers[i] <= mean(numbers)-sd(numbers)
numbers[1] <= mean(numbers)-sd(numbers)
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
str(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 50)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 10)
rdu_flights %>% group_by(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay),
n = n())
rdu_flights <- nycflights %>% filter(dest == "RDU")
rdu_flights %>% group_by(origin) %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay),
n = n())
rdu_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay))
rdu_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay),
iqr_dd = IQR(arr_delay))
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay),
iqr_dd = IQR(arr_delay))
sfo_feb_flights
sfo_feb_flights %>% group_by(carrier) %>% summarise(median_dd = median(arr_delay),
iqr_dd = IQR(arr_delay))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>% arrange(desc(mean_dd))
sfo_feb_flights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>% group_by(month) %>% summarise(median_dd = median(dep_delay)) %>%
arrange(desc(median_dd))
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) + geom_bar()
names(nycflights)
head(nycflights)
head(nycflights$hour)
nycflights <- nycflights %>% mutate(avg_speed = (dist / air_time/60))
nycflights <- nycflights %>% mutate(avg_speed = (distance / air_time/60))
select(avg_speed, tailnum)
nycflights %>% arrange(desc(avg_speed))
nycflights %>% arrange(desc(avg_speed)) %>% select(avg_speed,tailnum)
ggplot(nycflights, aes(x = avg_speed, y = distance))
ggplot(nycflights, aes(x = avg_speed, y = distance)) + geom_line()
ggplot(nycflights, aes(x = avg_speed, y = distance)) + geom_point()
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
names(nycflights)
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 10)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 30)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 5)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
data(nycflights)
#```
' The data frame containing our [nrow(nycflights) = 32735] flights that shows up in your
workspace is a *data matrix*, w/ each row representing an *observation* + each
column representing a *variable*. R calls this data format a **data frame**, which is
a term that will be used throughout the labs '
#```{r names}
names(nycflights)
#```
'This returns the names of the variables in this data frame. The **codebook**
(description of the variables) is included below. This info can also be
found in the help file for the data frame which can be accessed w/ ?nycflights
- `year`, `month`, `day`  : Date of departure
- `dep_time`, `arr_time`  : Departure + arrival times, local timezone.
- `dep_delay`, `arr_delay`: Departure + arrival delays, in minutes.
+ Negative times represent early departures/arrivals.
- `carrier`: 2 letter carrier abbreviation.
+ `9E`:           Endeavor Air Inc.
+ `AA`:      American Airlines Inc.
+ `AS`:        Alaska Airlines Inc.
+ `B6`:             JetBlue Airways
+ `DL`:        Delta Air Lines Inc.
+ `EV`:    ExpressJet Airlines Inc.
+ `F9`:      Frontier Airlines Inc.
+ `FL`: AirTran Airways Corporation
+ `HA`:      Hawaiian Airlines Inc.
+ `MQ`:                   Envoy Air
+ `OO`:       SkyWest Airlines Inc.
+ `UA`:       United Air Lines Inc.
+ `US`:             US Airways Inc.
+ `VX`:              Virgin America
+ `WN`:      Southwest Airlines Co.
+ `YV`:          Mesa Airlines Inc.
- `tailnum`         : Plane tail number
- `flight`          : Flight number
- `origin`, `dest`  : Airport codes for origin + destination. (Google can help you w/ what code
stands for which airport.)
- `air_time`        : Amount of time spent in the air, in minutes.
- `distance`        : Distance flown, in miles.
- `hour`, `minute`  : Time of departure broken in to hour and minutes.
Take a quick peek at the data frame + view its dimensions + data types w/ str (**str**ucture)'
#```{r str}
str(nycflights)
#```
'nycflights is a massive trove of info (32375 obs of 16 vars). Let\'s think about some questions we
might want to answer w/ it
- We might want to find out how delayed flights headed to a particular destination tend to be.
- We might want to evaluate how departure delays vary over months.
- We might want to determine which of the 3 major NYC airports has a better on-time % for
departing flights'
### Seven verbs
'`dplyr` offers 7 verbs (functions) for basic data manipulation:
- `filter()`
- `arrange()`
- `select()`
- `distinct()`
- `mutate()`
- `summarise()`
- `sample_n()`'
## Analysis
### Departure delays in flights to Raleigh-Durham (RDU)
'We can examine the distribution of departure delays of all flights W/ a histogram.
- Plot dep_delay from nycflights on the x-axis and create a histogram w/ "geom"'
#```{r hist-dep-delay}
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
#```
#Very right-skewed, so a lot of flights have a short delay, with many having negative delays (early)
'Histograms are generally a very good way to see the shape of a single distribution, but that shape
can change depending on how the data is split between the different bins.
-You can easily define the binwidth you want to use w/ the arg "binwidth"'
#```{r hist-dep-delay-bins}
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 150)
#
'<div id="exercise">
**Exercise**: How do these 3 histograms w/ the various binwidths compare?
</div>'
'If we want to focus on departure delays of flights headed to RDU *only*, we need to filter the data
for flights headed to RDU + then make a histogram of only departure delays of only those flights.'
#```{r rdu-flights-hist}
rdu_flights <- nycflights %>% filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
#```
'- Line 1 --> Take nycflights + apply filter() via the pipe operator (%>%) for flights w/ a destination
of RDU + save the result in a new data frame = `rdu_flights`.
- Line 2  --> Same histogram ggplot call from earlier except it uses the rdu_flights data frame'
#Still right-skewed --> most flights have short delays, if any, w/ most being on time or early
'<div id="boxedtext">
**Logical operators: ** Filtering for certain observations (e.g. flights from a particular airport)
is often of interest in data frames where we might want to examine observations w/ certain
characteristics separately from the rest of the data.
To do so we use filter() + a series of **logical operators**. The most commonly used logical operators
for data analysis are as follows:
- `==`          ==> "equal to"
- `!=`          ==> "not equal to"
- `>` or `<`    ==>  "greater than" or "less than"
- `>=` or `<=`  ==> "greater than or equal to" or "less than or equal to"
</div>'
#We can also obtain numerical summaries for these flights:
#```{r rdu-flights-summ}
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
#```
'W/ summarise() we created a list of 2 USER-DEFINED elements named `mean_dd`, `sd_dd`, `n`
-can customize these names as you like (just don\'t use spaces).
-Calculating these summary statistics also requires that you know the function calls.
- Note: n() reports sample size.
<div id="boxedtext">
**Summary statistics: ** Useful function calls for summary statistics for a *single* numerical
variable are as follows:
- `mean`
- `median`
- `sd`
- `var`
- `IQR`
- `range`
- `min`
- `max`
</div>
We can also filter based on multiple criteria. Suppose we\'re interested in flights headed to SF (SFO)
in February:'
#```{r}
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
#```
#We filer all flights from nycflights with a destination of SF AND in the month of Feb
'Note we separates the conditions using commas to get flights that are BOTH headed to SFO **AND** in
February. If interested in either flights headed to SFO **OR** in February, use `|` instead'
'1. Create a new data frame for flights headed to SFO in February, `sfo_feb_flights`. How many
flights meet these criteria? '
#```{r sfo-feb-flights}
str(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) + geom_bar()
nycflights <- nycflights %>% mutate(avg_speed = (distance / air_time/60))
nycflights %>% arrange(desc(avg_speed)) %>% select(avg_speed,tailnum)
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
- You\'re only recommending similar things to what the user has already liked, so the recommendations are often not surprising
rm(list=ls(all=TRUE))
setwd("C:/Users/Nimz/Dropbox/RunningAnalysis/Data")
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
#remove 1st col
runs$X <- NULL
str(runs)
library(ggplot2)
summary(runs)
ggplot(data = runs, aes(x = monthNum, y = Distance)) + geom_bar(stat="identity")
#most miles in August, not October, still more in November than in June
ggplot(data = runs, aes(x = Distance)) + geom_histogram(binwidth = 2,aes(fill = ..count..))
ggplot(data = runs, aes(x = Distance))
+ geom_histogram(binwidth = 2,aes(fill = ..count..))
+ guides(fill=FALSE)
ggplot(data = runs, aes(x = Distance))
+ geom_histogram(binwidth = 2,aes(fill = ..count..))
+ xlab("Distance (mi)")
+ ylab("Frequency")
+ ggtitle("Distribution of Miles Ran in All Runs")
ggplot(data = runs, aes(x = Distance))
+ geom_histogram(binwidth = 2,aes(fill = ..count..))
ggplot(data = runs, aes(x = Distance)) + geom_histogram(binwidth = 2,aes(fill = ..count..)) + xlab("Distance (mi)")
+ ylab("Frequency") + ggtitle("Distribution of Miles Ran in All Runs")
ggplot(data = runs, aes(x = Distance))+
geom_histogram(binwidth = 2,aes(fill = ..count..)) +
xlab("Distance (mi)") + ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs")
?ggtitle
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2,aes(fill = ..count..)) +
xlab("Distance (mi)") + ylab("Frequency") +
?ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="most mikle")
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2,aes(fill = ..count..)) +
xlab("Distance (mi)") + ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="most mikle")
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2,aes(fill = ..count..)) +
xlab("Distance (mi)") + ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="*Majority of runs were between 9 and 11 miles, with a suprisingly low number of runs between 7 and 9 miles")
ggplot(data = runs, aes(x = monthNum, y = Distance)) + geom_bar(stat="identity")
ggplot(data = runs, aes(x = Month, y = Distance)) + geom_bar(stat="identity") +
ggplot(data = runs, aes(x = Month, y = Distance)) + geom_bar(stat="identity")
ggplot(data = runs, aes(x = monthNum, y = Distance)) + geom_bar(stat="identity")
tapply(runs$Distance,runs$Month,sum)
ggplot(data = runs, aes(x = monthNum, y = Distance)) + geom_bar(stat="identity") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
ggplot(data = runs, aes(x = monthNum, y = Distance, fill = Distance)) +
geom_bar(stat="identity") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
ggplot(data = runs, aes(x = monthNum, y = Distance, fill = monthNum)) +
geom_bar(stat="identity") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
#most miles in August, not October, still more in November than in June
ggplot(data = runs, aes(x = monthNum, y = Distance, fill = monthNum)) +
geom_bar(stat="identity",colour="black") +
xlab("Month") +
ylab("Total Miles") +
ggtitle("Sum of Miles by Month") +
labs(caption="*The largest number of miles ran, 308 miles, was in September")
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2,aes(fill = ..count..)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
labs(caption="*Majority of runs were between 9 and 11 miles, with a suprisingly low number of runs between 7 and 9 miles")
str(runs)
?boxplot
boxplot(Cad ~ monthNum)
boxplot(Cad ~ monthNum, data = runs)
ggplot(data = runs, monthNum, Cad) + geom_boxplot()
ggplot(data = runs, monthNum, Cad) + geom_boxplot()
ggplot(data = runs, factor(monthNum), Cad) + geom_boxplot()
ggplot(data = runs, aes(monthNum, Cad)) + geom_boxplot()
ggplot(data = runs, aes(factor(monthNum), Cad)) + geom_boxplot()
ggplot(data = runs, aes(factor(monthNum), Cad)) + geom_boxplot() + geom_jitter()
ggplot(data = runs, aes(factor(monthNum), Cad)) +
geom_boxplot(aes(fill = monthNum), outlier.colour = red) + #geom_jitter()
)
ggplot(data = runs, aes(factor(monthNum), Cad)) +
geom_boxplot(aes(fill = monthNum), outlier.colour = red)
ggplot(data = runs, aes(factor(monthNum), Cad)) +
geom_boxplot(aes(fill = monthNum), outlier.colour = "red")
ggplot(data = runs, aes(factor(monthNum), Cad)) +
geom_boxplot(aes(fill = factor(monthNum)), outlier.colour = "red")
ggplot(data = runs, aes(factor(monthNum), Cad)) +
geom_boxplot(aes(fill = factor(monthNum)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
sort(runs$Cad)
?sort
sort(runs,Cad)
runs[sort(Cad)]
runs[sort(runs$Cad)]
runs[sort(runs$Cad),]
head(runs[sort(runs$Cad),])
as.numeric(runs$Cad)
ggplot(data = runs, aes(factor(monthNum), Avg.HR)) +
geom_boxplot(aes(fill = factor(monthNum)), outlier.colour = "red") + #geom_jitter()
xlab("Month") +
ylab("Cadence") +
ggtitle("Cadence per Month") +
labs(caption="*Cadence increases month over month, due to more workouts, or improved form?")
